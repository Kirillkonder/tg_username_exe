import time
import threading
import json
from datetime import datetime
import tkinter as tk
from tkinter import ttk, scrolledtext
from generator import UsernameGenerator
from parser import FragmentParser

class UsernameCheckerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Username Checker")
        self.root.geometry("900x700")
        
        self.generator = UsernameGenerator()
        self.parser = FragmentParser()
        self.running = False
        self.available_usernames = []
        self.total_checked = 0
        self.total_found = 0
        self.start_time = None
        
        self.setup_ui()
        
    def setup_ui(self):
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ 1: –ì–ª–∞–≤–Ω–∞—è (–∫–Ω–æ–ø–∫–∏ –∏ –ª–æ–≥–∏)
        self.main_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.main_frame, text="–ì–ª–∞–≤–Ω–∞—è")
        
        # –í–∫–ª–∞–¥–∫–∞ 2: –î–æ—Å—Ç—É–ø–Ω—ã–µ —é–∑–µ—Ä–Ω–µ–π–º—ã
        self.results_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.results_frame, text="–î–æ—Å—Ç—É–ø–Ω—ã–µ —é–∑–µ—Ä–Ω–µ–π–º—ã")
        
        self.setup_main_tab()
        self.setup_results_tab()
        
    def setup_main_tab(self):
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        button_frame = ttk.Frame(self.main_frame)
        button_frame.pack(fill='x', padx=10, pady=10)
        
        self.start_button = ttk.Button(button_frame, text="‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç", command=self.start_checking)
        self.start_button.pack(side='left', padx=5)
        
        self.stop_button = ttk.Button(button_frame, text="‚èπÔ∏è –°—Ç–æ–ø", command=self.stop_checking, state='disabled')
        self.stop_button.pack(side='left', padx=5)
        
        self.save_button = ttk.Button(button_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", command=self.save_results)
        self.save_button.pack(side='right', padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.refresh_button = ttk.Button(button_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", command=self.update_results_tab)
        self.refresh_button.pack(side='right', padx=5)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_frame = ttk.LabelFrame(self.main_frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats_frame.pack(fill='x', padx=10, pady=5)
        
        self.stats_label = ttk.Label(stats_frame, text="–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞...")
        self.stats_label.pack(padx=10, pady=5)
        
        # –õ–æ–≥–∏
        log_frame = ttk.LabelFrame(self.main_frame, text="–õ–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        log_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=20, width=100)
        self.log_text.pack(fill='both', expand=True, padx=5, pady=5)
        self.log_text.config(state='disabled')
        
    def setup_results_tab(self):
        # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —é–∑–µ—Ä–Ω–µ–π–º–∞–º–∏
        results_frame = ttk.Frame(self.results_frame)
        results_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.results_label = ttk.Label(results_frame, text="–î–æ—Å—Ç—É–ø–Ω—ã–µ —é–∑–µ—Ä–Ω–µ–π–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        self.results_label.pack(pady=5)
        
        # –¢–∞–±–ª–∏—Ü–∞
        columns = ('username', 'status', 'response_time', 'url')
        self.results_tree = ttk.Treeview(results_frame, columns=columns, show='headings', height=15)
        
        self.results_tree.heading('username', text='–Æ–∑–µ—Ä–Ω–µ–π–º')
        self.results_tree.heading('status', text='–°—Ç–∞—Ç—É—Å')
        self.results_tree.heading('response_time', text='–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞')
        self.results_tree.heading('url', text='–°—Å—ã–ª–∫–∞')
        
        self.results_tree.column('username', width=120)
        self.results_tree.column('status', width=100)
        self.results_tree.column('response_time', width=80)
        self.results_tree.column('url', width=200)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        scrollbar = ttk.Scrollbar(results_frame, orient='vertical', command=self.results_tree.yview)
        self.results_tree.configure(yscrollcommand=scrollbar.set)
        
        self.results_tree.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')
        
    def log_message(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        self.log_text.config(state='normal')
        self.log_text.insert('end', message + '\n')
        self.log_text.see('end')
        self.log_text.config(state='disabled')
        
    def update_stats(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if self.start_time:
            elapsed = (datetime.now() - self.start_time).total_seconds()
            speed = self.total_checked / (elapsed / 60) if elapsed > 0 else 0
            
            stats_text = (f"üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {self.total_checked} | "
                         f"üéØ –ù–∞–π–¥–µ–Ω–æ: {self.total_found} | "
                         f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.0f}/–º–∏–Ω | "
                         f"‚è±Ô∏è –í—Ä–µ–º—è: {elapsed:.0f} —Å–µ–∫")
            self.stats_label.config(text=stats_text)
        
    def update_results_tab(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.results_tree.get_children():
            self.results_tree.delete(item)
            
        if self.available_usernames:
            self.results_label.config(text=f"–ù–∞–π–¥–µ–Ω–æ {len(self.available_usernames)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —é–∑–µ—Ä–Ω–µ–π–º–æ–≤")
            
            for user in self.available_usernames:
                self.results_tree.insert('', 'end', values=(
                    user['username'],
                    user['status'],
                    f"{user['response_time']}—Å",
                    user['url']
                ))
        else:
            self.results_label.config(text="–î–æ—Å—Ç—É–ø–Ω—ã–µ —é–∑–µ—Ä–Ω–µ–π–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
        if not self.available_usernames:
            self.log_message("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
            
        filename = f"available_usernames_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write("üéØ –î–û–°–¢–£–ü–ù–´–ï –Æ–ó–ï–†–ù–ï–ô–ú–´ –ù–ê FRAGMENT.COM\n")
                f.write("=" * 60 + "\n\n")
                f.write(f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {self.total_checked} —é–∑–µ—Ä–Ω–µ–π–º–æ–≤\n")
                f.write(f"–ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö: {len(self.available_usernames)}\n")
                f.write(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"–í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
                
                for user in self.available_usernames:
                    f.write(f"üîπ –Æ–∑–µ—Ä–Ω–µ–π–º: {user['username']}\n")
                    f.write(f"üîó –°—Å—ã–ª–∫–∞:   {user['url']}\n")
                    f.write(f"üìä –°—Ç–∞—Ç—É—Å:   {user['status']}\n")
                    f.write(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {user.get('response_time', 0)}—Å\n")
                    f.write("-" * 40 + "\n")
            
            self.log_message(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {filename}")
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
            
    def start_checking(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if not self.running:
            self.running = True
            self.start_time = datetime.now()
            self.available_usernames = []
            self.total_checked = 0
            self.total_found = 0
            
            self.start_button.config(state='disabled')
            self.stop_button.config(state='normal')
            
            self.log_message("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏...")
            self.log_message("‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°—Ç–æ–ø'")
            self.log_message("=" * 50)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.check_thread = threading.Thread(target=self.run_continuous, daemon=True)
            self.check_thread.start()
            
    def stop_checking(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É"""
        if self.running:
            self.running = False
            self.start_button.config(state='normal')
            self.stop_button.config(state='disabled')
            
            self.log_message("üõë –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            self.log_message(f"üéØ –ò—Ç–æ–≥–æ: {self.total_checked} –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ, {self.total_found} –Ω–∞–π–¥–µ–Ω–æ")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            self.update_results_tab()
            
    def check_batch(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤"""
        usernames = self.generator.generate_batch(30)
        self.log_message(f"üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(usernames)} —é–∑–µ—Ä–Ω–µ–π–º–æ–≤")
        self.log_message(f"üìã –ü—Ä–∏–º–µ—Ä—ã: {', '.join(usernames[:3])}...")
        
        results = self.parser.check_usernames_batch(usernames)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.total_checked += len(usernames)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful = sum(1 for r in results if r['success'])
        available = [r for r in results if r['available']]
        errors = len(results) - successful
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞—Ç—á–∞
        self.log_message(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞—Ç—á–∞:")
        self.log_message(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful}/{len(usernames)}")
        self.log_message(f"   ‚ùå –û—à–∏–±–æ–∫: {errors}")
        self.log_message(f"   üéØ –î–æ—Å—Ç—É–ø–Ω—ã—Ö: {len(available)}")
        
        if available:
            self.available_usernames.extend(available)
            self.total_found += len(available)
            self.log_message(f"   üéâ –ù–ê–ô–î–ï–ù–û –î–û–°–¢–£–ü–ù–´–•:")
            for user in available:
                self.log_message(f"      üîπ {user['username']} - {user['status']} ({user['response_time']}s)")
            
            # –¢–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –ù–ï –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∫–ª–∞–¥–∫—É
            self.log_message("   üí° –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–î–æ—Å—Ç—É–ø–Ω—ã–µ —é–∑–µ—Ä–Ω–µ–π–º—ã' —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        
        return len(available)
    
    def run_continuous(self):
        """–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –ø–æ—Ç–æ–∫–µ)"""
        batch_count = 0
        
        try:
            while self.running:
                batch_count += 1
                self.log_message(f"\nüì¶ –ë–ê–¢–ß #{batch_count}")
                self.log_message("=" * 40)
                
                found = self.check_batch()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ UI
                self.root.after(0, self.update_stats)
                
                # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                time.sleep(2)
                
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            self.root.after(0, self.stop_checking)

def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    root = tk.Tk()
    app = UsernameCheckerApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()